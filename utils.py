import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

from torch_geometric.utils import to_networkx
from torch_geometric.data import Data
from operator import itemgetter


def coords_string_to_tuple_list(coords_string: str) -> [(int, int)]:
    """
    A function that transforms string with coordinates of 2D points
    to list of tuples.

    Example of 2D coordinate string:
        "1,1 2,2 3,3 4,4 ..."

    Example of list of tuples:
         [(1,1), (2,2), (3,3), (4,4), ...]

    :type coords_string:  String
    :param coords_string: String with coordinates of 2D points
    :return:              A list of int tuples
    """

    str_2d_points = coords_string.split(" ")
    return [(int(str_2d_point.split(",")[0]), int(str_2d_point.split(",")[1]))
            for str_2d_point in str_2d_points]


def tuple_list_to_coords_string(tuple_list: [(int, int)]) -> str:
    """
    Inverse function to coords_string_to_tuple_list() that transforms a list
    of integer tuples to string.

    Example of integer tuples:
        [(1,1), (2,2), (3,3), (4,4), ...]

    Example of the output string:
        "1,1 2,2 3,3 4,4 ..."

    :type tuple_list:   List of integer tuples
    :param tuple_list:  List of integer tuples
    :return:            String that contains the transformed list of integer tuples
    """

    return " ".join([str(number_fst) + "," + str(number_nd)
                     for number_fst, number_nd in tuple_list])


def get_multiple_values_from_dict(dict: {}, keys: []) -> []:
    """
    Returns multiple values from dictionary with a single call.

    :param dict:  A dictionary that contains the wanted values.
    :param keys:  Keys that should be used to find the values in
                  the dictionary.
    :return:      A list with the wanted values.
    """
    if not keys:
        return []

    values = itemgetter(*keys)(dict)

    if type(values) is tuple:
        return list(values)
    else:
        return [values]


def range_wrapper(start_value: int, end_value: int) -> [int]:
    """
    Wrapper around builtin function range(). The function returns
    start_value when start_value == end_value.

    :param start_value: Start value for range()
    :param end_value:   End value for range()
    :return:            List of integers generated by range()
    """
    return list(range(start_value, end_value)) + [end_value]


def visualize_graph(data: Data) -> None:
    us = data.edge_index[0]
    vs = data.edge_index[1]
    edges = [(int(u), int(v)) for u, v in zip(us, vs)]

    G = nx.Graph()
    for node_idx, node_attributes in enumerate(data.visualize_position):
        G.add_node(node_idx, position=(float(node_attributes[0]), float(node_attributes[1])))

    position = nx.get_node_attributes(G, 'position')

    for u, v in edges:
        G.add_edge(u, v)

    nx.draw(G, position, with_labels=True)
    plt.show()
    return None
